110. 平衡二叉树
class Solution {
public:
    int getHeight(TreeNode* node){
        if(node == nullptr) return 0;
        int leftHeight = getHeight(node -> left);
        if(leftHeight == -1) return -1;
        int rightHeight = getHeight(node -> right);
        if(rightHeight == -1) return -1;

        int res;
        if(abs(leftHeight - rightHeight) > 1){
            res = -1;
        }else{
            res = 1 + max(leftHeight, rightHeight);
        }
        return res;
    }
    bool isBalanced(TreeNode* root) {
        return getHeight(root) == -1 ? false : true;
    }
};

257. 二叉树的所有路径
class Solution {
private:
    void traversal(TreeNode* cur, vector<int>& path, vector<string>& res){
        path.push_back(cur -> val);
        if(cur -> left == nullptr && cur -> right == nullptr){
            string sPath;
            for(int i = 0; i < path.size() - 1; i++){
                sPath += to_string(path[i]);
                sPath += "->";
            }
            sPath += to_string(path[path.size() - 1]);
            res.push_back(sPath);
            return;
        }

        if(cur -> left){
            traversal(cur -> left, path, res);
            path.pop_back();
        }
        if(cur -> right){
            traversal(cur ->right, path, res);
            path.pop_back();
        }
    }

public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> res;
        vector<int> path;
        if(root == nullptr) return res;
        traversal(root, path, res);
        return res;
    }
};

404. 左叶子之和
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        if(root == nullptr) return 0;
        if(root -> left == nullptr && root -> right == nullptr) return 0;
        
        int leftValue = sumOfLeftLeaves(root -> left);
        if(root -> left && !root -> left ->left && !root -> left -> right){
            leftValue = root -> left -> val;
        }
        int rightValue = sumOfLeftLeaves(root -> right);
        
        int sum = leftValue + rightValue;
        return sum;
    }
};
