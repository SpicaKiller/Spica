216. 组合总和 III
class Solution {
private:
    vector<vector<int>> res;
    vector<int> path;
    void backTracking(int sum, int target, int k, int startIndex){
        if(path.size() == k){
            if(sum == target){
                res.push_back(path);
                return;
            }
        }
        for(int i = startIndex; i <= 9; i++){
            sum += i;
            path.push_back(i);
            backTracking(sum, target, k, i + 1);
            sum -= i;
            path.pop_back();
        }
    }
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        res.clear();
        path.clear();
        backTracking(0, n, k, 1);
        return res;
    }
};

17. 电话号码的字母组合
class Solution {
private:
    const string letterMap[10] = {
                "", // 0
        "", // 1
        "abc", // 2
        "def", // 3
        "ghi", // 4
        "jkl", // 5
        "mno", // 6
        "pqrs", // 7
        "tuv", // 8
        "wxyz", // 9
    };
    string s;
    vector<string> res;
    void backTracking(const string& digits, int index){
        if(index == digits.size()){
            res.push_back(s);
            return;
        }

        int digit = digits[index] - '0';
        string letters = letterMap[digit];
        for(int i = 0; i < letters.size(); i++){
            s.push_back(letters[i]);
            backTracking(digits, index + 1);
            s.pop_back();
        }
    }
public:
    vector<string> letterCombinations(string digits) {
        s.clear();
        res.clear();
        if(digits.size() == 0) return res;
        backTracking(digits, 0);
        return res;
    }
};
