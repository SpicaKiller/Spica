235. 二叉搜索树的最近公共祖先
class Solution {
private:
    TreeNode* traversal(TreeNode* cur, TreeNode* p, TreeNode* q){
        if(cur == nullptr) return cur;

        if(cur -> val > p -> val && cur -> val > q ->val){
            TreeNode* left = traversal(cur -> left, p, q);
            if(left != nullptr) 
               return left;
        }

        if(cur -> val < p -> val && cur -> val < q -> val){
            TreeNode* right = traversal(cur -> right, p,q);
            if(right != nullptr)
               return right;
        }
        return cur;
    }
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        return traversal(root, q,p);
    }
};

701. 二叉搜索树中的插入操作
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(root == nullptr){
            TreeNode* node = new TreeNode(val);
            return node;
        }

        if(root -> val > val) root -> left = insertIntoBST(root -> left, val);
        if(root -> val < val) root -> right = insertIntoBST(root -> right, val);
        return root;
    }
};
450. 删除二叉搜索树中的节点
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root ==  nullptr) return root;
        if(root -> val == key){
            if(root -> left == nullptr && root -> right == nullptr){
                delete root;
                return nullptr;
            }
            else if(root -> left == nullptr){
                auto temp = root -> right;
                delete root;
                return temp;
            }
            else if(root -> right ==  nullptr){
                auto temp = root -> left;
                delete root;
                return temp;
            }
            else{
                TreeNode* cur = root -> right;
                while(cur -> left != nullptr){
                    cur = cur -> left;
                }
                cur -> left = root -> left;
                TreeNode* node = root;
                root = root -> right;
                delete node;
                return root;
            }
        }
        if(root -> val > key) root -> left = deleteNode(root -> left, key);
        if(root -> val < key) root -> right = deleteNode(root -> right, key);
        return root;
    }
};
