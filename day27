39. 组合总和
class Solution {
private:
    vector<vector<int>> res;
    vector<int> path;
    void backTracking(vector<int>& candidates, int target, int sum, int startIndex){
        if(sum > target){
            return;
        }

        if(sum == target){
            res.push_back(path);
            return;
        }

        for(int i = startIndex; i < candidates.size() && sum + candidates[i] <= target; i++){
            sum += candidates[i];
            path.push_back(candidates[i]);
            backTracking(candidates, target, sum, i);
            sum -=candidates[i];
            path.pop_back();
        }
    }
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        res.clear();
        path.clear();
        sort(candidates.begin(), candidates.end());
        backTracking(candidates, target, 0, 0);
        return res;
    }
};

40. 组合总和 II
class Solution {
private:
    vector<vector<int>> res;
    vector<int> path;
    void backtracking(vector<int>& candidates, int target, int sum, int startIndex, vector<bool>& used){
        if(sum == target){
            res.push_back(path);
            return;
        }
        
        for(int i = startIndex; i < candidates.size() && sum + candidates[i] <= target; i++){
            if(i > 0 && candidates[i - 1] == candidates[i] && used[i - 1] == false){
                continue;
            }
            sum += candidates[i];
            path.push_back(candidates[i]);
            used[i] = true;
            backtracking(candidates, target, sum, i + 1, used);
            sum -= candidates[i];
            used[i] = false;
            path.pop_back();

        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        res.clear();
        path.clear();
        vector<bool> used(candidates.size(), false);
        sort(candidates.begin(), candidates.end());
        backtracking(candidates,target, 0, 0, used);
        return res;
    }
};

131. 分割回文串
class Solution {
private:
    vector<vector<string>> res;
    vector<string> path;
    bool isPalindrome(const string&s, int start, int end){
        for(int i = start, j = end; i < j; i++, j--){
            if(s[i] != s[j])
            return false;
        }
        return true;
    }
    void backTracking(const string& s, int startIndex){
        if(startIndex >= s.size()){
            res.push_back(path);
            return;
        }
        for(int i = startIndex; i < s.size(); i++){
            if(isPalindrome(s, startIndex, i)){
                string str = s.substr(startIndex,i - startIndex + 1);
                path.push_back(str);
            }else{
                continue;
            }
            backTracking(s, i + 1);
            path.pop_back();
        }
    }
public:
    vector<vector<string>> partition(string s) {
        path.clear();
        res.clear();
        backTracking(s, 0);
        return res;
    }
};
