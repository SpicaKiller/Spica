530. 二叉搜索树的最小绝对差
class Solution {
private:
    vector<int> vec;
    void traversal(TreeNode* root){
        if(root == nullptr) return;
        traversal(root -> left);
        vec.push_back(root -> val);
        traversal(root -> right);
    }
public:
    int getMinimumDifference(TreeNode* root) {
        vec.clear();
        traversal(root);
        if(vec.size() < 2) return 0;
        int res = INT_MAX;
        for(int i = 1;i < vec.size(); i++){
            res = min(res,vec[i] - vec[i - 1]);
        }
        return res;
    }
};

501. 二叉搜索树中的众数
class Solution {
private:
    int maxCount = 0;
    int count = 0;
    TreeNode* pre = nullptr;
    vector<int> res;
    void searchBST(TreeNode* cur){
        if(cur == nullptr) return;
        searchBST(cur -> left);
        if(pre == nullptr) count = 1;
        else if(pre -> val == cur -> val) count++;
        else count = 1;
        pre = cur;

        if(count == maxCount) res.push_back(cur -> val);

        if(count > maxCount){
            maxCount = count;
            res.clear();
            res.push_back(cur -> val);
        }

        searchBST(cur -> right);
    }
public:
    vector<int> findMode(TreeNode* root) {
        count = 0;
        maxCount = 0;
        pre = nullptr;
        res.clear();

        searchBST(root);
        return res;
    }
};

236. 二叉树的最近公共祖先
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == p || root == q || root == nullptr) return root;

        TreeNode* left = lowestCommonAncestor(root -> left, p, q);
        TreeNode* right = lowestCommonAncestor(root -> right, p, q);

        if(left != nullptr && right !=nullptr) return root;

        if(left == nullptr && right != nullptr) return right;
        else if(left != nullptr && right == nullptr) return left;
        else return nullptr;

    }
};
