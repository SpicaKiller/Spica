93. 复原 IP 地址
class Solution {
private:
    vector<string> res;
    bool isValid(const string&s, int start, int end){
        if(start > end) return false;

        if(s[start] == '0' && start != end) return false;

        int num = 0;

        for(int i = start; i <= end; i++){
            if(s[i] < '0' || s[i] > '9'){ 
                return false;
            }
            num = num * 10 + (s[i] -'0');
            if(num > 255){
                return false;
            }
        }
        return true;
    }

    void backTracking(string& s, int startIndex, int pointNum){
        if(pointNum == 3){
            if(isValid(s, startIndex, s.size() - 1)){
                res.push_back(s);
            }
            return;
        }

        for(int i = startIndex; i < s.size(); i++){
            if(isValid(s, startIndex, i)){
                s.insert(s.begin() + i + 1, '.');
                pointNum++;
                backTracking(s, i + 2, pointNum);
                pointNum--;
                s.erase(s.begin() + i + 1);
            }else{
                break;
            }
        }
    }

public:
    vector<string> restoreIpAddresses(string s) {
        res.clear();
        if(s.size() < 4 || s.size() > 12) return res;
        backTracking(s, 0, 0);
        return res;
    }
};

78. 子集
class Solution {
private:
    vector<vector<int>> res;
    vector<int> path;
    void backTracking(vector<int>& nums, int startIndex){
        res.push_back(path);
        if(startIndex >= nums.size()){
            return;
        }

        for(int i = startIndex; i < nums.size(); i++){
            path.push_back(nums[i]);
            backTracking(nums, i + 1);
            path.pop_back();
        }
    }
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        res.clear();
        path.clear();
        backTracking(nums, 0);
        return res;
    }
};

90. 子集 II
class Solution {
private:
    vector<vector<int>> res;
    vector<int> path;
    void backTracking(vector<int>& nums, vector<bool> isUsed, int startIndex){
        res.push_back(path);
        if(startIndex >= nums.size()) return;
        for(int i = startIndex; i < nums.size(); i++){
            if(i > 0 && nums[i] == nums[i - 1] && isUsed[i - 1] == false){
                continue;
            }
            path.push_back(nums[i]);
            isUsed[i] = true;
            backTracking(nums, isUsed, i + 1);
            isUsed[i] = false;
            path.pop_back();

        }
    }
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        res.clear();
        path.clear();
        vector<bool> used(nums.size(),false);
        sort(nums.begin(),nums.end());
        backTracking(nums, used, 0);
        return res;
    }
};
