654. 最大二叉树
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        TreeNode* node = new TreeNode(0);
        if(nums.size() == 1){
            node -> val = nums[0];
            return node;
        }

        int maxValue = 0;
        int maxValueIndex = 0;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] > maxValue){
                maxValue = nums[i];
                maxValueIndex = i;
            }
        }
        node -> val = maxValue;

        if(maxValueIndex > 0){
            vector<int> newLeftVec(nums.begin(),nums.begin() + maxValueIndex);
            node -> left = constructMaximumBinaryTree(newLeftVec);
        }
        if(maxValueIndex < (nums.size() - 1)){
            vector<int> newRightVec(nums.begin() + maxValueIndex + 1, nums.end());
            node -> right = constructMaximumBinaryTree(newRightVec);
        }
        return node;
    }
};

617. 合并二叉树
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if(root1 == nullptr) return root2;
        if(root2 == nullptr) return root1;
        root1 -> val += root2 -> val;
        root1 -> left = mergeTrees(root1 -> left, root2 -> left);
        root1 -> right = mergeTrees(root1 -> right, root2 -> right); 
        return root1;
    }
};

700. 二叉搜索树中的搜索
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        if(root == nullptr || root -> val == val) return root;
        TreeNode* res = nullptr;
        if(root -> val > val) res = searchBST(root -> left, val);
        if(root -> val < val) res = searchBST(root -> right, val);
        return res;
    }
};

98. 验证二叉搜索树
class Solution {
private:
    vector<int> vec;
    void traversal(TreeNode* root){
        if(root == nullptr) return;
        traversal(root -> left);
        vec.push_back(root -> val);
        traversal(root -> right);
    }
public:
    bool isValidBST(TreeNode* root) {
        traversal(root);
        for(int i = 1; i < vec.size(); i++){
            if(vec[i] <= vec[i - 1]){
                return false;
            }
        }
        return true;
    }
};
