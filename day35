860. 柠檬水找零
class Solution {
public:
    bool lemonadeChange(vector<int>& bills) {
        int five = 0, ten = 0, twenty = 0;
        for(int bill : bills){
            if(bill == 5){
                five++;
            }
            if(bill == 10){
                if(five <= 0) return false;
                ten++;
                five--;
            }
            if(bill == 20){
                if(five > 0 && ten > 0){
                    five--;
                    ten--;
                    twenty++;
                }else if(five >= 3){
                    five -= 3;
                    twenty++;
                }else{
                    return false;
                }
            }
        }
        return true;
    }
};

406. 根据身高重建队列
class Solution {
private:
    static bool cmp(const vector<int>& a, const vector<int>& b){
        if(a[0] == b[0]) return a[1] < b[1];
        return a[0] > b[0];
    }
public:
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        sort(people.begin(), people.end(), cmp);
        list<vector<int>> que;
        for(int i = 0; i < people.size(); i++){
            int position = people[i][1];
            list<vector<int>>::iterator it = que.begin();
            while(position--){
                it++;
            }
            que.insert(it, people[i]);
        }
        return vector<vector<int>>(que.begin(),que.end());
    }
};

452. 用最少数量的箭引爆气球
class Solution {
private:
    static bool cmp(const vector<int>& a, const vector<int>& b){
        return a[0] < b[0];
    }
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        if(points.size() == 0) return 0;
        sort(points.begin(), points.end(), cmp);

        int res = 1;
        for(int i = 1; i < points.size(); i++){
            if(points[i][0] > points[i - 1][1]){
                res++;

            }else{
                points[i][1] = min(points[i][1],points[i - 1][1]);
            }
        }
        return res;
    }
};
