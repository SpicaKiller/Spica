669. 修剪二叉搜索树
class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        if(root == nullptr) return nullptr;
        if(root -> val < low){
            TreeNode* right = trimBST(root -> right, low, high);
            return right;
        }
        if(root -> val > high){
            TreeNode* left = trimBST(root -> left, low, high);
            return left;
        }

        root -> left = trimBST(root -> left, low, high);
        root -> right = trimBST(root -> right, low, high);
        return root;
    }
};

108. 将有序数组转换为二叉搜索树
class Solution {
public:
    TreeNode* traversal(vector<int>& nums, int left, int right){
        if (left > right) return nullptr;
        int mid = left + ((right - left) / 2);
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = traversal(nums, left, mid - 1);
        root->right = traversal(nums, mid + 1, right);
        return root;

    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        TreeNode* root = traversal(nums, 0, nums.size() - 1);
        return root;
    }
};

538. 把二叉搜索树转换为累加树
class Solution {
private:
    int pre = 0;
    void traversal(TreeNode* cur){
        if(cur == nullptr) return;
        traversal(cur -> right);
        cur -> val += pre;
        pre = cur -> val;
        traversal(cur -> left);
    }
public:
    TreeNode* convertBST(TreeNode* root) {
        pre = 0;
        traversal(root);
        return root;
    }
};
