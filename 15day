102.二叉树的层序遍历
class Solution {
public:
    void order(TreeNode* cur,vector<vector<int>>& res, int depth){
        if(cur == nullptr) return;
        if(res.size() == depth) res.push_back(vector<int>());
        res[depth].push_back(cur -> val);
        order(cur -> left, res, depth + 1);
        order(cur -> right, res, depth + 1);
    }
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        int depth = 0;
        order(root, res,depth);
        return res;
    }
};

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*> que;
        if(root != nullptr) que.push(root);
        vector<vector<int>> res;
        while(!que.empty()){
            int size = que.size();
            vector<int> vec;
            for(int i = 0; i < size; i++){
                TreeNode* node = que.front();
                que.pop();
                vec.push_back(node -> val);
                if(node -> left) que.push(node -> left);
                if(node -> right) que.push(node -> right);
            }
            res.push_back(vec);
        }
        return res;
    }
};

226.翻转二叉树
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if (root == NULL) return root;
        swap(root->left, root->right);  
        invertTree(root->left);         
        invertTree(root->right);        
        return root;
    }
};

class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root == nullptr) return root;
        stack<TreeNode*> st;
        st.push(root);
        while(!st.empty()){
            TreeNode* node = st.top();
            st.pop();
            swap(node -> left, node -> right);
            if(node -> left) st.push(node -> left);
            if(node -> right) st.push(node -> right);
        }
        return root;
    }
};


101. 对称二叉树
class Solution {
public:
    bool compare(TreeNode* left, TreeNode* right){
        if(left == nullptr && right !=nullptr) return false;
        else if(left != nullptr && right == nullptr) return false;
        else if(left ==nullptr && right == nullptr) return true;
        else if(left -> val != right -> val) return false;

        bool outside = compare(left -> left, right -> right);
        bool inside = compare(left -> right, right -> left);
        bool isSame = outside && inside;
        return isSame;
    }
    bool isSymmetric(TreeNode* root) {
        if(root == nullptr) return true;
        return compare(root -> left, root -> right);
    }
};

class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root == nullptr) return true;
        queue<TreeNode*> que;
        que.push(root -> left);
        que.push(root -> right);

        while(!que.empty()){
            TreeNode* leftNode = que.front();
            que.pop();
            TreeNode* rightNode = que.front();
            que.pop();
            if(!leftNode && !rightNode){
                continue;
            }

            if((!leftNode || !rightNode || (leftNode -> val != rightNode -> val))){
                return false;
            }
            que.push(leftNode -> left);
            que.push(rightNode -> right);
            que.push(leftNode -> right);
            que.push(rightNode -> left);
        }
        return true;
    }
};
